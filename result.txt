Begin lexical analysis
const_sy  const
int_sy  int
ident MAX_STACK_NUM
endow  =
un_intcon  10
comma  ,
ident MAX_CHOOSE_NUM
endow  =
un_intcon  10
semicolon  ;
const_sy  const
char_sy  char
ident DIVIDE
endow  =
charcon  _
semicolon  ;
int_sy  int
ident stack
l_bracket  [
un_intcon  12
r_bracket  ]
comma  ,
ident used
l_bracket  [
un_intcon  12
r_bracket  ]
semicolon  ;
int_sy  int
ident n
comma  ,
ident m
semicolon  ;
int_sy  int
ident sum
semicolon  ;
int_sy  int
ident get_max_num_1
l_parentheses  (
int_sy  int
ident get_max_num_1
l_parentheses  (
r_parentheses  )
l_brace  {
return_sy  return
l_parentheses  (
ident MAX_STACK_NUM
r_parentheses  )
semicolon  ;
r_brace  }
int_sy  int
ident get_max_num_2
l_parentheses  (
r_parentheses  )
l_brace  {
int_sy  int
ident max_num
semicolon  ;
ident max_num
endow  =
ident MAX_CHOOSE_NUM
semicolon  ;
return_sy  return
l_parentheses  (
ident max_num
r_parentheses  )
semicolon  ;
r_brace  }
int_sy  int
ident get_2
l_parentheses  (
r_parentheses  )
l_brace  {
const_sy  const
int_sy  int
ident m
endow  =
un_intcon  2
semicolon  ;
return_sy  return
l_parentheses  (
ident m
r_parentheses  )
semicolon  ;
r_brace  }
int_sy  int
ident compute
l_parentheses  (
int_sy  int
ident a
comma  ,
int_sy  int
ident b
comma  ,
char_sy  char
ident op
r_parentheses  )
l_brace  {
if_sy  if
l_parentheses  (
l_parentheses  (
ident op
r_parentheses  )
beq  ==
l_parentheses  (
charcon  +
r_parentheses  )
r_parentheses  )
return_sy  return
l_parentheses  (
l_parentheses  (
ident a
plus  +
un_intcon  2
multiply  *
ident b
r_parentheses  )
minus  -
ident b
r_parentheses  )
semicolon  ;
else_sy  else
l_brace  {
if_sy  if
l_parentheses  (
l_parentheses  (
ident op
r_parentheses  )
beq  ==
l_parentheses  (
charcon  -
r_parentheses  )
r_parentheses  )
return_sy  return
l_parentheses  (
ident a
minus  -
l_parentheses  (
ident b
plus  +
ident b
r_parentheses  )
division  /
un_intcon  2
r_parentheses  )
semicolon  ;
else_sy  else
l_brace  {
if_sy  if
l_parentheses  (
l_parentheses  (
ident op
r_parentheses  )
beq  ==
l_parentheses  (
charcon  *
r_parentheses  )
r_parentheses  )
return_sy  return
l_parentheses  (
ident a
multiply  *
ident b
r_parentheses  )
semicolon  ;
else_sy  else
l_brace  {
if_sy  if
l_parentheses  (
ident b
r_parentheses  )
return_sy  return
l_parentheses  (
ident a
division  /
ident b
r_parentheses  )
semicolon  ;
else_sy  else
return_sy  return
l_parentheses  (
l_parentheses  (
l_parentheses  (
un_intcon  1
plus  +
un_intcon  2
r_parentheses  )
multiply  *
un_intcon  3
minus  -
un_intcon  4
r_parentheses  )
division  /
un_intcon  5
multiply  *
un_intcon  6
plus  +
intcon  -7
plus  +
un_intcon  1
r_parentheses  )
semicolon  ;
r_brace  }
r_brace  }
r_brace  }
r_brace  }
void_sy  void
ident permutations
l_parentheses  (
int_sy  int
ident a
r_parentheses  )
l_brace  {
int_sy  int
ident i
semicolon  ;
ident i
endow  =
un_intcon  0
semicolon  ;
if_sy  if
l_parentheses  (
ident a
beq  ==
ident m
r_parentheses  )
l_brace  {
if_sy  if
l_parentheses  (
ident i
blt  <
ident m
r_parentheses  )
l_brace  {
do_sy  do
l_brace  {
printf_sy  printf
l_parentheses  (
stringcon   
comma  ,
ident stack
l_bracket  [
ident i
r_bracket  ]
r_parentheses  )
semicolon  ;
ident i
endow  =
ident i
plus  +
un_intcon  1
semicolon  ;
r_brace  }
while_sy  while
l_parentheses  (
ident i
blt  <
ident m
r_parentheses  )
r_brace  }
printf_sy  printf
l_parentheses  (
stringcon  ___________
r_parentheses  )
semicolon  ;
return_sy  return
semicolon  ;
r_brace  }
ident i
endow  =
un_intcon  1
semicolon  ;
do_sy  do
l_brace  {
if_sy  if
l_parentheses  (
ident used
l_bracket  [
ident i
r_bracket  ]
bne  !=
un_intcon  0
r_parentheses  )
semicolon  ;
else_sy  else
l_brace  {
ident stack
l_bracket  [
ident a
r_bracket  ]
endow  =
ident i
semicolon  ;
ident used
l_bracket  [
ident i
r_bracket  ]
endow  =
un_intcon  1
semicolon  ;
ident permutations
l_parentheses  (
ident a
plus  +
un_intcon  1
r_parentheses  )
semicolon  ;
ident used
l_bracket  [
ident i
r_bracket  ]
endow  =
un_intcon  0
semicolon  ;
r_brace  }
ident i
endow  =
ident i
plus  +
un_intcon  1
semicolon  ;
r_brace  }
while_sy  while
l_parentheses  (
ident i
ble  <=
ident n
r_parentheses  )
r_brace  }
char_sy  char
ident get_permutations_sy
l_parentheses  (
r_parentheses  )
l_brace  {
const_sy  const
char_sy  char
ident PERMUTATIONS_SY
endow  =
charcon  T
semicolon  ;
return_sy  return
l_parentheses  (
ident PERMUTATIONS_SY
r_parentheses  )
semicolon  ;
r_brace  }
char_sy  char
ident judge
l_parentheses  (
int_sy  int
ident n
comma  ,
int_sy  int
ident m
r_parentheses  )
l_brace  {
const_sy  const
char_sy  char
ident DIVIDE
endow  =
charcon  *
semicolon  ;
printf_sy  printf
l_parentheses  (
ident DIVIDE
r_parentheses  )
semicolon  ;
if_sy  if
l_parentheses  (
ident n
bge  >=
ident get_max_num_1
l_parentheses  (
r_parentheses  )
plus  +
un_intcon  1
r_parentheses  )
return_sy  return
l_parentheses  (
charcon  F
r_parentheses  )
semicolon  ;
if_sy  if
l_parentheses  (
ident m
bgt  >
ident n
r_parentheses  )
return_sy  return
l_parentheses  (
charcon  F
r_parentheses  )
semicolon  ;
if_sy  if
l_parentheses  (
ident m
ble  <=
un_intcon  0
r_parentheses  )
return_sy  return
l_parentheses  (
charcon  F
r_parentheses  )
semicolon  ;
return_sy  return
l_parentheses  (
charcon  T
r_parentheses  )
semicolon  ;
r_brace  }
void_sy  void
ident preparation
l_parentheses  (
r_parentheses  )
l_brace  {
const_sy  const
int_sy  int
ident zero
endow  =
un_intcon  0
semicolon  ;
int_sy  int
ident n
semicolon  ;
int_sy  int
ident i
semicolon  ;
int_sy  int
ident array
l_bracket  [
un_intcon  12
r_bracket  ]
semicolon  ;
ident n
endow  =
ident compute
l_parentheses  (
ident get_max_num_1
l_parentheses  (
r_parentheses  )
comma  ,
un_intcon  1
comma  ,
charcon  +
r_parentheses  )
semicolon  ;
if_sy  if
l_parentheses  (
ident n
r_parentheses  )
l_brace  {
do_sy  do
l_brace  {
ident n
endow  =
intcon  -1
plus  +
ident n
semicolon  ;
ident used
l_bracket  [
ident n
r_bracket  ]
endow  =
ident zero
semicolon  ;
ident array
l_bracket  [
ident n
r_bracket  ]
endow  =
un_intcon  10086
semicolon  ;
r_brace  }
while_sy  while
l_parentheses  (
ident n
r_parentheses  )
r_brace  }
ident n
endow  =
ident compute
l_parentheses  (
ident MAX_CHOOSE_NUM
comma  ,
ident get_2
l_parentheses  (
r_parentheses  )
comma  ,
charcon  +
r_parentheses  )
minus  -
un_intcon  1
semicolon  ;
do_sy  do
l_brace  {
ident stack
l_bracket  [
ident n
minus  -
un_intcon  1
r_bracket  ]
endow  =
ident array
l_bracket  [
ident n
plus  +
l_parentheses  (
intcon  -6
division  /
un_intcon  4
plus  +
un_intcon  2
multiply  *
un_intcon  3
r_parentheses  )
multiply  *
un_intcon  4
minus  -
un_intcon  21
r_bracket  ]
minus  -
un_intcon  10086
semicolon  ;
ident n
endow  =
ident n
minus  -
un_intcon  1
semicolon  ;
r_brace  }
while_sy  while
l_parentheses  (
ident n
r_parentheses  )
return_sy  return
semicolon  ;
r_brace  }
void_sy  void
ident test_for
l_parentheses  (
r_parentheses  )
l_brace  {
int_sy  int
ident i
semicolon  ;
ident i
endow  =
un_intcon  1
semicolon  ;
do_sy  do
l_brace  {
printf_sy  printf
l_parentheses  (
stringcon  test for success
r_parentheses  )
semicolon  ;
ident i
endow  =
ident i
plus  +
un_intcon  1
semicolon  ;
r_brace  }
while_sy  while
l_parentheses  (
un_intcon  0
r_parentheses  )
r_brace  }
int_sy  int
ident test_6_para
l_parentheses  (
int_sy  int
ident a1
comma  ,
int_sy  int
ident a2
comma  ,
int_sy  int
ident a3
comma  ,
int_sy  int
ident a4
comma  ,
int_sy  int
ident a5
comma  ,
int_sy  int
ident a6
r_parentheses  )
l_brace  {
return_sy  return
l_parentheses  (
ident a1
plus  +
ident a2
plus  +
ident a3
plus  +
ident a4
plus  +
ident a5
plus  +
ident a6
r_parentheses  )
semicolon  ;
r_brace  }
void_sy  void
main_sy  main
l_parentheses  (
r_parentheses  )
l_brace  {
int_sy  int
ident a
comma  ,
ident b
semicolon  ;
char_sy  char
ident op
semicolon  ;
char_sy  char
ident sy
comma  ,
ident nor_sy
semicolon  ;
ident test_for
l_parentheses  (
r_parentheses  )
semicolon  ;
scanf_sy  scanf
l_parentheses  (
ident a
comma  ,
ident b
comma  ,
ident op
r_parentheses  )
semicolon  ;
ident n
endow  =
ident compute
l_parentheses  (
ident a
comma  ,
ident b
comma  ,
ident op
r_parentheses  )
semicolon  ;
printf_sy  printf
l_parentheses  (
ident DIVIDE
r_parentheses  )
semicolon  ;
printf_sy  printf
l_parentheses  (
ident n
r_parentheses  )
semicolon  ;
scanf_sy  scanf
l_parentheses  (
ident m
r_parentheses  )
semicolon  ;
ident sy
endow  =
ident judge
l_parentheses  (
ident n
comma  ,
ident m
r_parentheses  )
semicolon  ;
ident sum
endow  =
ident test_6_para
l_parentheses  (
ident a
comma  ,
ident b
comma  ,
ident n
comma  ,
ident m
comma  ,
un_intcon  1
comma  ,
un_intcon  2
r_parentheses  )
semicolon  ;
printf_sy  printf
l_parentheses  (
ident sum
r_parentheses  )
semicolon  ;
printf_sy  printf
l_parentheses  (
stringcon  You can choose m numbers permutations from n numbers ? 
comma  ,
ident sy
r_parentheses  )
semicolon  ;
printf_sy  printf
l_parentheses  (
stringcon  ___________
r_parentheses  )
semicolon  ;
ident nor_sy
endow  =
ident get_permutations_sy
l_parentheses  (
r_parentheses  )
semicolon  ;
if_sy  if
l_parentheses  (
l_parentheses  (
ident sy
r_parentheses  )
bne  !=
l_parentheses  (
ident nor_sy
r_parentheses  )
r_parentheses  )
printf_sy  printf
l_parentheses  (
stringcon  error input: 0 < m <= n <= 10
r_parentheses  )
semicolon  ;
else_sy  else
l_brace  {
ident preparation
l_parentheses  (
r_parentheses  )
semicolon  ;
ident permutations
l_parentheses  (
un_intcon  0
r_parentheses  )
semicolon  ;
r_brace  }
r_brace  }
The Source program has been read
